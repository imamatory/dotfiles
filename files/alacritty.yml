# Configuration for Alacritty, the GPU enhanced terminal emulator.

env:
  # for starting tmux with correnct locale
  LC_ALL: en_US.UTF-8
  LANG: en_US.UTF-8
  TERM: xterm-256color

window:
  dynamic_title: true
  startup_mode: Maximized
  option_as_alt: Both
  # decorations: none
  padding:
    x: 2
    y: 2

shell:
  program: /bin/zsh
  arg:
    - -l
    - -c
    - "tmux"

font:
  normal:
    # family: Monaco
    family: Hack Nerd Font Mono
  size: 12
  glyph_offset:
    y: 1
  bold:
    family: Monaco
    style: Bold

  italic:
    family: Monaco
    style: Italic

import:
  - ~/.config/alacritty/catppuccin/catppuccin-frappe.yml

custom_cursor_colors: true
hide_cursor_when_typing: true

mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

  # url:
  # URL launcher
  #
  # This program is executed when clicking on a text which is recognized as a URL.
  # The URL is always added to the Control as the last parameter.
  # launcher: xdg-open

  # hints:
  # enabled:
  #  - regex: "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
  #            [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^âŸ¨âŸ©`]+"
  #    command: xdg-open
  #    post_processing: true
  #    mouse:
  #      enabled: false # ðŸ‘ˆ
  #      mods: None

  # URL modifiers
  #
  # These are the modifiers that need to be held down for opening URLs when clicking
  # on them. The available modifiers are documented in the key binding section.
  modifiers: Control|Shift

selection:
  semantic_escape_chars: ',â”‚`|:"'' ()[]{}<>'

  # When set to `true`, selected text will be copied to both the primary and
  # the selection clipboard. Otherwise, it will only be copied to the selection
  # clipboard.
  save_to_clipboard: true

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# A list with all available `key` names can be found here:
# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
key_bindings:
  - { key: Q, mods: Control, action: Quit }
  - { key: N, mods: Command, action: SpawnNewInstance }
  - { key: Key0, mods: Control, action: ResetFontSize }
  - { key: Equals, mods: Control, action: IncreaseFontSize }
  - { key: Minus, mods: Control, action: DecreaseFontSize }
  - { key: T, mods: Command, chars: "\x02\x63" }
  - { key: H, mods: Command, chars: "\x06\x48" }
  - { key: J, mods: Command, chars: "\x06\x4a" }
  - { key: K, mods: Command, chars: "\x06\x4b" }
  - { key: L, mods: Command, chars: "\x06\x4c" }

  # Select window 1-9
  - { key: Key1, mods: Command, chars: "\x02\x31" }
  - { key: Key2, mods: Command, chars: "\x02\x32" }
  - { key: Key3, mods: Command, chars: "\x02\x33" }
  - { key: Key4, mods: Command, chars: "\x02\x34" }
  - { key: Key5, mods: Command, chars: "\x02\x35" }
  - { key: Key6, mods: Command, chars: "\x02\x36" }
  - { key: Key7, mods: Command, chars: "\x02\x37" }
  - { key: Key8, mods: Command, chars: "\x02\x38" }
  - { key: Key9, mods: Command, chars: "\x02\x39" }

    # Toggle the zoom state of the current tmux pane
  - { key: O, mods: Command, chars: "\x02\x7a" }

  # https://stackoverflow.com/a/42461580
  - { key: Return, mods: Shift,   chars: "\x1b[13;2u" }
  - { key: Return, mods: Control, chars: "\x1b[13;5u" }
  - { key: Space,  mods: Shift,   chars: "\x1b[32;2u" }
